process MuonHits  = 
{

   service = MessageLogger
   {
      untracked vstring destinations = {"cout"}
      untracked vstring categories = { "FwkJob" }
      untracked PSet cout =
      {
         untracked PSet default = { untracked int32 limit = 0 }
         untracked PSet FwkJob  = { untracked int32 limit = -1 }
      }
   }

include "SimGeneral/HepPDTESSource/data/pdt.cfi"

   service = RandomNumberGeneratorService
   {
      untracked uint32 sourceSeed = 98765
      PSet moduleSeeds =
      {
         untracked uint32 VtxSmeared = 12345
         untracked uint32 SimG4Object = 9876
      }
   }
      
   # flat random E-gun, single pion
   #
   # to run it along with CMS detector simulation
   # (OscarProducer) make sure to select QGSP physics
   # list, instead DummyPhysics ("Dummy" has only EM 
   # process and wont know to model interactions of
   # hadrons with matter)
   #
   source = FlatRandomEGunSource
   {
      untracked int32 maxEvents = 100
      untracked PSet PGunParameters =
      {
         # you can request more than 1 particle
         #vint32  PartID = {211,11}
         # vint32 PartID = {211}
         untracked vint32 PartID = {13}
         untracked double MinEta =  -2.4
         untracked double MaxEta =  2.4
         untracked double MinPhi = -3.14159265358979323846 # in radians
         untracked double MaxPhi =  3.14159265358979323846
         untracked double MinE   =  99.9
         untracked double MaxE   = 100.1
      }
      untracked int32 Verbosity = 0 # set to 1 (or greater)  for printouts
   }

   module VtxSmeared = VertexGenerator 
   {
         string type ="IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
         double MeanX = 0.
         double MeanY = 0.
         double MeanZ = 0.
         double SigmaX = 0.015
         double SigmaY = 0.015
         double SigmaZ = 53.0  // in mm (as in COBRA/OSCAR)
   }

   #Geometry
   #   
   include "Geometry/CMSCommonData/data/cmsSimIdealGeometryXML.cfi"
   es_module = TrackerGeometricDetESModule {}

   # Magnetic Field
   #
   include "MagneticField/Engine/data/volumeBasedMagneticField.cfi"

		
   module SimG4Object = OscarProducer 
   { 
			bool  NonBeamEvent = false
			untracked int32 RunNumber = 1001
			untracked int32 G4EventManagerVerbosity = 0
			untracked int32 G4StackManagerVerbosity = 0
			# bool UseMagneticField = true
			bool UseMagneticField = false
			bool OverrideUserStackingAction = true
			bool StoreRndmSeeds = false
			bool RestoreRndmSeeds = false
			string PhysicsTablesDirectory = "PhysicsTables"
			bool StorePhysicsTables = false
			bool RestorePhysicsTables = false
			#VPSet Watchers = {
			#	{ string type = "SimTracer"
			#	  untracked bool verbose = true }
			#}
	                PSet MagneticField =
                        {
                                double delta = 1.
                        }
                	PSet Physics =
			{
				string type = "SimG4Core/Physics/QGSP"
				bool DummyEMPhysics = false
                                bool CutsPerRegion = true
				double DefaultCutValue = 1000. # in cm, i.e. 10m
				untracked int32 Verbosity = 0  # 1 will print cuts as they get set from DD
				                               # 2 will do as 1 + will dump Geant4 table of cuts
			}
			PSet Generator = 
			{
				bool ApplyPtCuts = true
				bool ApplyEtaCuts = true
				bool ApplyPhiCuts = false
				double MinPhiCut = 0.    # in degrees; 
				double MaxPhiCut = 360.  # internally converted to radians, (-pi,pi) range accounted for
				double MinEtaCut = -5.5
				double MaxEtaCut = 5.5
				double MinPtCut = 10.0
				double MaxPtCut = 999999.0
				untracked int32 Verbosity = 0
		        }

                        PSet VertexGenerator =
                        {
                                string type = "IOMC/EventVertexGenerators/GaussianEventVertexGenerator"
                                double MeanX = 0.
                                double MeanY = 0.
                                double MeanZ = 0.
                                double SigmaX = 0.015
                                double SigmaY = 0.015
                                double SigmaZ = 5.3
                        }


			PSet RunAction = { string StopFile = "StopRun" }
			PSet EventAction =
			{
				bool CollapsePrimaryVertices = false
				string StopFile = "StopRun"
				untracked bool debug = false
			}
			PSet TrackingAction = 
			{ 
			   untracked bool DetailedTiming = false 
			}
          PSet UtilityActions =
          {
               string type = "SimG4Core/UtilityAction/TrackingVerboseAction"
               untracked bool  DEBUG = false
               untracked bool  CheckForHighEtPhotons = false
               untracked int32 EventMin = 0
               untracked int32 EventMax = 0
               untracked int32 EventStep = 1
               untracked int32 TrackMin = 0
               untracked int32 TrackMax = 0
               untracked int32 TrackStep = 1
               untracked int32 VerboseLevel = 0 
          }

			PSet SteppingAction =
			{
				bool   KillBeamPipe = true
				double CriticalEnergyForVacuum = 2.0
				double CriticalDensity = 1.e-15
				untracked int32  Verbosity = 0
			}

			PSet TrackerSD =
			{
				bool    ZeroEnergyLoss = false
				bool	NeverAccumulate = false
				bool	PrintHits = false
				double  ElectronicSigmaInNanoSeconds = 12.06         
				double  EnergyThresholdForPersistencyInGeV = 0.5
				double  EnergyThresholdForHistoryInGeV = 0.05
			}

                        PSet MuonSD =
                        {
                                double  EnergyThresholdForPersistency = 1.0
                                bool    AllMuonsPersistent = false
                                bool    PrintHits = false
                        }

                        PSet CaloSD = {
                           double EminTrack = 1.0
                           untracked int32  CheckHits = 25
                           untracked bool   UseMap = true
                           #int32  Verbosity = 1
                           untracked int32 Verbosity = 0
                           untracked bool   DetailedTiming = false
                        }
                        PSet ECalSD = {
                           bool   UseBirkLaw = false
                           double BirkC1 = 0.013
                           double BirkC2 = 9.6e-6
                           #int32  Verbosity = 11
			   int32 Verbosity = 0
                        }
                        PSet HCalSD = {
                           bool   UseBirkLaw = false
                           double BirkC1 = 0.013
                           double BirkC2 = 9.6e-6
                           #int32  Verbosity = 111
			   int32 Verbosity = 0
                           bool   UseShowerLibrary = true
                           bool   TestNumberingScheme = false
                        }
                        PSet CaloTrkProcessing = {
                           #int32  Verbosity = 1
                           int32 Verbosity = 0
                           bool   TestBeam  = false
                           double EminTrack = 0.01
                        }
                        PSet HFShower =    {
                           #int32  Verbosity = 11
                           int32 Verbosity = 0
                           double ProbMax   = 0.7268
                           double CFibre    = 0.50
                        }
                        PSet HFShowerLibrary = {
                           FileInPath FileName = "SimG4CMS/Calo/data/hfshowerlibrary_lhep.root"
                           string TreeEMID  = "h3"
                           string TreeHadID = "h8"
                        }
                       PSet HFCherenkov = {
                           #int32  Verbosity       = 1
                           int32 Verbosity = 0
                           double RefIndex        = 1.459
                           double Lambda1         = 280.0
                           double Lambda2         = 700.0
                           double Aperture        = 0.33
                           double ApertureTrapped = 0.22
                           double Gain            = 0.33
                           bool   CheckSurvive    = false
                        }


   }  # end of OscarProducer's block

include "Geometry/CSCGeometry/data/cscGeometry.cfi"
include "Geometry/DTGeometry/data/dtGeometry.cfi"
include "Geometry/RPCGeometry/data/rpcGeometry.cfi"

   module vp = MuonSimHitsValidProducer
   {
      untracked string Name = "MuonSimHitsValidProducer"
      untracked int32 Verbosity = 11  # verbosity inclusive. 
                                     # 0 provides no output
                                     # 1 provides basic output
                                     # 2 provides output of the fill step
                                     # 3 provides output of the store step
      string Label = "Hits"
      PSet ProvenanceLookup =
      {
         untracked bool GetAllProvenances = false
         untracked bool PrintProvenanceInfo = false
      }
      InputTag CSCHitsSrc = SimG4Object:MuonCSCHits
      InputTag DTHitsSrc = SimG4Object:MuonDTHits
      InputTag RPCHitsSrc = SimG4Object:MuonRPCHits
   }  

   module o1 = PoolOutputModule 
   { 
      untracked vstring outputCommands =
     {
      "keep *",
      "drop PSimHits_*_*_*",
      "drop PCaloHits_*_*_*"
     }
      untracked string fileName = "muonsimvalid.root" 
   }

   path p1 = { VtxSmeared, SimG4Object, vp }
#   path p1 = { SimG4Object, vp }
   endpath outpath = { o1 }
   
}		
